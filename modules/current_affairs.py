import streamlit as st
from utils.ai_services import AIServices
from utils.data_manager import DataManager
from utils.language_manager import LanguageManager
from datetime import datetime, timedelta
import requests
import json

def show_current_affairs_page(language: str, lang_manager: LanguageManager):
    """Display the current affairs tracker page"""
    
    ai_services = AIServices()
    data_manager = DataManager()
    
    st.markdown(f"## üì∞ {lang_manager.get_text('current_affairs_tracker', language)}")
    
    # Current affairs categories
    categories = lang_manager.get_current_affairs_categories(language)
    
    # Tab layout for different sections
    tab1, tab2, tab3 = st.tabs([
        "Latest Updates" if language == 'en' else "‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü",
        "Practice Questions" if language == 'en' else "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "My Progress" if language == 'en' else "‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø"
    ])
    
    with tab1:
        display_latest_updates(categories, language, lang_manager)
    
    with tab2:
        display_practice_questions(categories, language, ai_services, data_manager, lang_manager)
    
    with tab3:
        display_current_affairs_progress(data_manager, language, lang_manager)

def display_latest_updates(categories: dict, language: str, lang_manager: LanguageManager):
    """Display latest current affairs updates"""
    
    st.markdown(f"### üåü {lang_manager.get_text('latest_updates', language)}")
    
    # Category filter
    selected_category = st.selectbox(
        "Select Category" if language == 'en' else "‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç",
        options=list(categories.keys()),
        key="ca_category_filter"
    )
    
    # Date range filter
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input(
            "From Date" if language == 'en' else "‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï ‡§∏‡•á",
            value=datetime.now().date() - timedelta(days=7),
            key="ca_start_date"
        )
    
    with col2:
        end_date = st.date_input(
            "To Date" if language == 'en' else "‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï ‡§§‡§ï",
            value=datetime.now().date(),
            key="ca_end_date"
        )
    
    # Refresh button
    if st.button("üîÑ Refresh Updates" if language == 'en' else "üîÑ ‡§Ö‡§™‡§°‡•á‡§ü ‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç"):
        with st.spinner("Fetching latest updates..." if language == 'en' else "‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..."):
            updates = fetch_current_affairs_updates(selected_category, start_date, end_date, language)
            display_news_updates(updates, language)
    
    # Display sample/cached updates when API is not available
    st.markdown("---")
    st.markdown("#### üìã Recent Important Updates" if language == 'en' else "#### üìã ‡§π‡§æ‡§≤ ‡§ï‡•á ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§™‡§°‡•á‡§ü")
    
    # Note: In a real implementation, this would fetch from news APIs
    st.info("Note: Connect news APIs for live updates. Currently showing educational framework." if language == 'en'
           else "‡§®‡•ã‡§ü: ‡§≤‡§æ‡§á‡§µ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•ç‡§Ø‡•Ç‡§ú API ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§¢‡§æ‡§Ç‡§ö‡§æ ‡§¶‡§ø‡§ñ‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§")
    
    # Educational framework for current affairs structure
    display_current_affairs_framework(selected_category, language)

def display_practice_questions(categories: dict, language: str, ai_services: AIServices, 
                             data_manager: DataManager, lang_manager: LanguageManager):
    """Display current affairs practice questions"""
    
    st.markdown(f"### üìù {lang_manager.get_text('generate_questions', language)}")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Topic selection
        selected_category = st.selectbox(
            lang_manager.get_text('news_topic', language),
            options=list(categories.keys()),
            key="ca_question_category"
        )
        
        # Specific topic input
        specific_topic = st.text_input(
            "Specific Topic (Optional)" if language == 'en' else "‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§µ‡§ø‡§∑‡§Ø (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)",
            placeholder="e.g., Budget 2024, G20 Summit" if language == 'en' else "‡§ú‡•à‡§∏‡•á, ‡§¨‡§ú‡§ü 2024, ‡§ú‡•Ä20 ‡§∂‡§ø‡§ñ‡§∞ ‡§∏‡§Æ‡•ç‡§Æ‡•á‡§≤‡§®",
            key="ca_specific_topic"
        )
        
        # Number of questions
        num_questions = st.selectbox(
            "Number of Questions" if language == 'en' else "‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
            options=[3, 5, 10],
            index=1,
            key="ca_num_questions"
        )
    
    with col2:
        # Time period selection
        time_period = st.selectbox(
            "Time Period" if language == 'en' else "‡§∏‡§Æ‡§Ø ‡§Ö‡§µ‡§ß‡§ø",
            options=[
                "Last 30 days" if language == 'en' else "‡§™‡§ø‡§õ‡§≤‡•á 30 ‡§¶‡§ø‡§®",
                "Last 3 months" if language == 'en' else "‡§™‡§ø‡§õ‡§≤‡•á 3 ‡§Æ‡§π‡•Ä‡§®‡•á",
                "Last 6 months" if language == 'en' else "‡§™‡§ø‡§õ‡§≤‡•á 6 ‡§Æ‡§π‡•Ä‡§®‡•á",
                "Current Year" if language == 'en' else "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§µ‡§∞‡•ç‡§∑"
            ],
            key="ca_time_period"
        )
        
        # Difficulty level
        difficulty = st.slider(
            "Difficulty Level" if language == 'en' else "‡§ï‡§†‡§ø‡§®‡§æ‡§à ‡§∏‡•ç‡§§‡§∞",
            min_value=1,
            max_value=5,
            value=3,
            key="ca_difficulty"
        )
    
    # Generate questions button
    if st.button(f"üöÄ {lang_manager.get_text('generate_questions', language)}", use_container_width=True):
        generate_current_affairs_quiz(selected_category, specific_topic, num_questions, difficulty, 
                                    language, ai_services, data_manager, lang_manager)

def generate_current_affairs_quiz(category: str, specific_topic: str, num_questions: int, 
                                difficulty: int, language: str, ai_services: AIServices,
                                data_manager: DataManager, lang_manager: LanguageManager):
    """Generate and display current affairs quiz"""
    
    # Prepare topic for AI
    topic_for_ai = f"{category}"
    if specific_topic:
        topic_for_ai += f" - {specific_topic}"
    
    with st.spinner(lang_manager.get_text('loading', language)):
        questions = ai_services.generate_current_affairs_questions(topic_for_ai, language)
    
    if not questions:
        st.error("Unable to generate current affairs questions. Please check your OpenAI API key or try again later." 
                if language == 'en' else "‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä OpenAI API key ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
        return
    
    # Limit to requested number
    questions = questions[:num_questions]
    
    # Initialize quiz session for current affairs
    if 'ca_quiz_session' not in st.session_state:
        st.session_state.ca_quiz_session = {
            'questions': questions,
            'current_question': 0,
            'answers': [],
            'score': 0,
            'category': category,
            'language': language
        }
    
    # Display current affairs quiz
    display_ca_quiz(st.session_state.ca_quiz_session, data_manager, lang_manager)

def display_ca_quiz(session: dict, data_manager: DataManager, lang_manager: LanguageManager):
    """Display current affairs quiz interface"""
    
    language = session['language']
    current_q_idx = session['current_question']
    
    if current_q_idx < len(session['questions']):
        question = session['questions'][current_q_idx]
        
        # Progress bar
        progress = (current_q_idx + 1) / len(session['questions'])
        st.progress(progress)
        st.markdown(f"**Current Affairs Quiz {current_q_idx + 1}/{len(session['questions'])}**")
        
        # Question display
        st.markdown(f"### üì∞ {question['question']}")
        
        # Date relevance if available
        if question.get('date_relevance'):
            st.caption(f"**Relevant Time Period:** {question['date_relevance']}")
        
        # Answer options
        user_answer = st.radio(
            "Select your answer:",
            options=range(len(question['options'])),
            format_func=lambda x: f"{chr(65+x)}. {question['options'][x]}",
            key=f"ca_question_{current_q_idx}"
        )
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            if st.button(lang_manager.get_text('submit_answer', language), use_container_width=True):
                # Record answer
                is_correct = user_answer == question['correct_answer']
                session['answers'].append({
                    'question_idx': current_q_idx,
                    'user_answer': user_answer,
                    'correct_answer': question['correct_answer'],
                    'is_correct': is_correct,
                    'question_text': question['question'],
                    'explanation': question.get('explanation', '')
                })
                
                if is_correct:
                    session['score'] += 1
                    st.success("‚úÖ Correct!")
                else:
                    st.error("‚ùå Incorrect!")
                    st.markdown(f"**{lang_manager.get_text('correct_answer', language)}:** {chr(65 + question['correct_answer'])}. {question['options'][question['correct_answer']]}")
                
                if question.get('explanation'):
                    st.info(f"**{lang_manager.get_text('explanation', language)}:** {question['explanation']}")
                
                # Move to next question
                session['current_question'] += 1
                
                import time
                time.sleep(2)
                st.rerun()
        
        with col2:
            if st.button("‚è≠Ô∏è Skip"):
                session['answers'].append({
                    'question_idx': current_q_idx,
                    'user_answer': -1,
                    'correct_answer': question['correct_answer'],
                    'is_correct': False,
                    'question_text': question['question'],
                    'explanation': question.get('explanation', '')
                })
                session['current_question'] += 1
                st.rerun()
    
    else:
        # Quiz completed
        display_ca_quiz_results(session, data_manager, lang_manager)

def display_ca_quiz_results(session: dict, data_manager: DataManager, lang_manager: LanguageManager):
    """Display current affairs quiz results"""
    
    language = session['language']
    score = session['score']
    total = len(session['questions'])
    percentage = (score / total) * 100 if total > 0 else 0
    
    st.markdown(f"# üéâ Current Affairs Quiz Completed!" if language == 'en' else "# üéâ ‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡•Ç‡§∞‡•ç‡§£!")
    
    # Performance metrics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Score" if language == 'en' else "‡§∏‡•ç‡§ï‡•ã‡§∞", f"{score}/{total}")
    
    with col2:
        st.metric("Percentage", f"{percentage:.1f}%")
    
    with col3:
        points_earned = score * 10  # 10 points per correct answer
        st.metric("Points Earned" if language == 'en' else "‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ ‡§Ö‡§Ç‡§ï", points_earned)
    
    # Update user progress
    if 'current_affairs_score' not in st.session_state.user_data:
        st.session_state.user_data['current_affairs_score'] = 0
    
    st.session_state.user_data['current_affairs_score'] += points_earned
    st.session_state.user_data['total_points'] += points_earned
    
    # Performance feedback
    if percentage >= 80:
        st.success("üåü Excellent! You're well-informed about current affairs!" if language == 'en'
                  else "üåü ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü! ‡§Ü‡§™ ‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç!")
    elif percentage >= 60:
        st.info("üëç Good performance! Keep reading news regularly." if language == 'en'
               else "üëç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®! ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§™‡§¢‡§º‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§")
    else:
        st.warning("üìö Need to focus more on current affairs. Read newspapers daily!" if language == 'en'
                  else "üìö ‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§™‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§¶‡•à‡§®‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞‡§™‡§§‡•ç‡§∞ ‡§™‡§¢‡§º‡•á‡§Ç!")
    
    # Detailed review
    with st.expander("üìã Detailed Review" if language == 'en' else "üìã ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ"):
        for i, answer in enumerate(session['answers']):
            question = session['questions'][answer['question_idx']]
            
            if answer['is_correct']:
                st.success(f"**Q{i+1}.** {answer['question_text']}")
            else:
                st.error(f"**Q{i+1}.** {answer['question_text']}")
                if answer['user_answer'] != -1:
                    st.markdown(f"Your answer: ‚ùå {question['options'][answer['user_answer']]}")
                else:
                    st.markdown("Your answer: ‚è≠Ô∏è Skipped")
                st.markdown(f"Correct answer: ‚úÖ {question['options'][answer['correct_answer']]}")
            
            if answer['explanation']:
                st.info(f"üí° {answer['explanation']}")
            
            st.divider()
    
    # Action buttons
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Another Quiz" if language == 'en' else "üîÑ ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º", use_container_width=True):
            if 'ca_quiz_session' in st.session_state:
                del st.session_state.ca_quiz_session
            st.rerun()
    
    with col2:
        if st.button("üìä View Progress" if language == 'en' else "üìä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç", use_container_width=True):
            st.session_state.page = 'Analytics'
            st.rerun()
    
    with col3:
        if st.button("üè† Home" if language == 'en' else "üè† ‡§π‡•ã‡§Æ", use_container_width=True):
            if 'ca_quiz_session' in st.session_state:
                del st.session_state.ca_quiz_session
            st.session_state.page = 'Home'
            st.rerun()

def display_current_affairs_progress(data_manager: DataManager, language: str, lang_manager: LanguageManager):
    """Display user's current affairs progress and statistics"""
    
    st.markdown(f"### üìà Current Affairs Performance" if language == 'en' else "### üìà ‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®")
    
    # Get current affairs specific stats
    ca_score = st.session_state.user_data.get('current_affairs_score', 0)
    
    # Progress metrics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "CA Points Earned" if language == 'en' else "‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§Ö‡§Ç‡§ï",
            ca_score
        )
    
    with col2:
        # Calculate reading streak (simplified)
        reading_streak = calculate_reading_streak()
        st.metric(
            "Reading Streak" if language == 'en' else "‡§™‡§†‡§® ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ",
            f"{reading_streak} days" if language == 'en' else f"{reading_streak} ‡§¶‡§ø‡§®"
        )
    
    with col3:
        topics_covered = len(set([quiz.get('topic', '') for quiz in data_manager.get_quiz_history() 
                                if 'Current Affairs' in quiz.get('topic', '')]))
        st.metric(
            "Topics Covered" if language == 'en' else "‡§ï‡§µ‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è ‡§µ‡§ø‡§∑‡§Ø",
            topics_covered
        )
    
    # Current affairs recommendations
    st.markdown("---")
    st.markdown("### üí° Study Recommendations" if language == 'en' else "### üí° ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§∏‡•Å‡§ù‡§æ‡§µ")
    
    recommendations = get_current_affairs_recommendations(language, ca_score)
    for rec in recommendations:
        st.info(f"üìå {rec}")
    
    # Important topics to focus on
    st.markdown("### üéØ Important Topics to Focus" if language == 'en' else "### üéØ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§µ‡§ø‡§∑‡§Ø")
    
    important_topics = get_important_current_affairs_topics(language)
    
    cols = st.columns(2)
    for i, topic in enumerate(important_topics):
        with cols[i % 2]:
            st.markdown(f"üî∏ {topic}")

def fetch_current_affairs_updates(category: str, start_date, end_date, language: str):
    """Fetch current affairs updates from news sources"""
    
    # Note: In a real implementation, this would integrate with news APIs like:
    # - NewsAPI
    # - Hindu API
    # - PIB (Press Information Bureau) RSS feeds
    # - Government websites RSS
    
    # For now, return empty list as we don't want to mock data
    return []

def display_news_updates(updates: list, language: str):
    """Display fetched news updates"""
    
    if not updates:
        st.info("No updates available. Please check your internet connection or try again later." 
               if language == 'en' else "‡§ï‡•ã‡§à ‡§Ö‡§™‡§°‡•á‡§ü ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
        return
    
    for update in updates:
        with st.container():
            st.markdown(f"### {update.get('title', '')}")
            st.markdown(f"**Date:** {update.get('date', '')}")
            st.markdown(update.get('summary', ''))
            if update.get('source'):
                st.caption(f"Source: {update['source']}")
            st.divider()

def display_current_affairs_framework(category: str, language: str):
    """Display educational framework for current affairs structure"""
    
    st.markdown("#### üìö Study Framework" if language == 'en' else "#### üìö ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§¢‡§æ‡§Ç‡§ö‡§æ")
    
    frameworks = {
        'en': {
            'National Politics': [
                "Parliament sessions and important bills",
                "Government policies and schemes",
                "Election updates and political developments",
                "Constitutional amendments and judicial decisions"
            ],
            'International Relations': [
                "Bilateral and multilateral agreements",
                "International summits and conferences",
                "Trade relations and economic partnerships",
                "Global conflicts and peace initiatives"
            ],
            'Economy & Business': [
                "Budget announcements and fiscal policies",
                "Economic indicators and market trends",
                "Banking and financial sector updates",
                "Industry developments and corporate news"
            ],
            'Science & Technology': [
                "Space missions and scientific achievements",
                "Technology innovations and digital initiatives",
                "Healthcare breakthroughs and medical research",
                "Environmental technology and climate solutions"
            ]
        },
        'hi': {
            'National Politics': [
                "‡§∏‡§Ç‡§∏‡§¶ ‡§∏‡§§‡•ç‡§∞ ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§µ‡§ø‡§ß‡•á‡§Ø‡§ï",
                "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§î‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç",
                "‡§ö‡•Å‡§®‡§æ‡§µ ‡§Ö‡§™‡§°‡•á‡§ü ‡§î‡§∞ ‡§∞‡§æ‡§ú‡§®‡•Ä‡§§‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏",
                "‡§∏‡§Ç‡§µ‡•à‡§ß‡§æ‡§®‡§ø‡§ï ‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§î‡§∞ ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ø‡§ï ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø"
            ],
            'International Relations': [
                "‡§¶‡•ç‡§µ‡§ø‡§™‡§ï‡•ç‡§∑‡•Ä‡§Ø ‡§î‡§∞ ‡§¨‡§π‡•Å‡§™‡§ï‡•ç‡§∑‡•Ä‡§Ø ‡§∏‡§Æ‡§ù‡•å‡§§‡•á",
                "‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∂‡§ø‡§ñ‡§∞ ‡§∏‡§Æ‡•ç‡§Æ‡•á‡§≤‡§® ‡§î‡§∞ ‡§∏‡§Æ‡•ç‡§Æ‡•á‡§≤‡§®",
                "‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§ø‡§ï ‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§î‡§∞ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§æ‡§ù‡•á‡§¶‡§æ‡§∞‡•Ä",
                "‡§µ‡•à‡§∂‡•ç‡§µ‡§ø‡§ï ‡§∏‡§Ç‡§ò‡§∞‡•ç‡§∑ ‡§î‡§∞ ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§™‡§π‡§≤"
            ],
            'Economy & Business': [
                "‡§¨‡§ú‡§ü ‡§ò‡•ã‡§∑‡§£‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§∞‡§æ‡§ú‡§ï‡•ã‡§∑‡•Ä‡§Ø ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç",
                "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï ‡§î‡§∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§∞‡•Å‡§ù‡§æ‡§®",
                "‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü",
                "‡§â‡§¶‡•ç‡§Ø‡•ã‡§ó ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§î‡§∞ ‡§ï‡•â‡§∞‡•ç‡§™‡•ã‡§∞‡•á‡§ü ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞"
            ],
            'Science & Technology': [
                "‡§Ö‡§Ç‡§§‡§∞‡§ø‡§ï‡•ç‡§∑ ‡§Æ‡§ø‡§∂‡§® ‡§î‡§∞ ‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç",
                "‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä ‡§®‡§µ‡§æ‡§ö‡§æ‡§∞ ‡§î‡§∞ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§™‡§π‡§≤",
                "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§®",
                "‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®"
            ]
        }
    }
    
    lang_key = 'hi' if language == 'hi' else 'en'
    framework_items = frameworks.get(lang_key, {}).get(category, frameworks[lang_key]['National Politics'])
    
    for item in framework_items:
        st.markdown(f"‚Ä¢ {item}")

def calculate_reading_streak():
    """Calculate user's reading streak (simplified implementation)"""
    # In a real implementation, this would track daily reading activity
    # For now, return a placeholder value
    return 1

def get_current_affairs_recommendations(language: str, ca_score: int) -> list:
    """Get personalized current affairs study recommendations"""
    
    if language == 'hi':
        if ca_score < 50:
            return [
                "‡§¶‡•à‡§®‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞‡§™‡§§‡•ç‡§∞ ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§¶‡§§ ‡§¨‡§®‡§æ‡§è‡§Ç",
                "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡•ã‡§Ç ‡§∏‡•á ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§Ç",
                "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§ï‡§∞‡§Ç‡§ü ‡§Ö‡§´‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§™‡§§‡•ç‡§∞‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç",
                "‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø YouTube ‡§ö‡•à‡§®‡§≤ ‡§´‡•â‡§≤‡•ã ‡§ï‡§∞‡•á‡§Ç"
            ]
        else:
            return [
                "‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§™‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç",
                "‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§∞‡•ç‡§µ‡•á‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§¨‡§ú‡§ü ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç",
                "‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
                "‡§∏‡§Æ‡•Ç‡§π ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§ó ‡§≤‡•á‡§ï‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§ù ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç"
            ]
    else:
        if ca_score < 50:
            return [
                "Develop a habit of reading daily newspapers",
                "Follow reliable news websites and apps",
                "Study monthly current affairs magazines",
                "Subscribe to government press releases and PIB updates"
            ]
        else:
            return [
                "Focus more on international affairs and global events",
                "Read economic surveys and budget documents",
                "Practice current affairs MCQs regularly",
                "Participate in group discussions to enhance understanding"
            ]

def get_important_current_affairs_topics(language: str) -> list:
    """Get list of important current affairs topics"""
    
    if language == 'hi':
        return [
            "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä G20 ‡§Ö‡§ß‡•ç‡§Ø‡§ï‡•ç‡§∑‡§§‡§æ",
            "‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§™‡§π‡§≤",
            "‡§Ü‡§§‡•ç‡§Æ‡§®‡§ø‡§∞‡•ç‡§≠‡§∞ ‡§≠‡§æ‡§∞‡§§ ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®",
            "‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§î‡§∞ COP28",
            "‡§≠‡§æ‡§∞‡§§-‡§ö‡•Ä‡§® ‡§∏‡•Ä‡§Æ‡§æ ‡§µ‡§ø‡§µ‡§æ‡§¶",
            "‡§ï‡•É‡§∑‡§ø ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§î‡§∞ MSP",
            "‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ ‡§≠‡§æ‡§∞‡§§ ‡§Æ‡§ø‡§∂‡§®",
            "‡§®‡§à ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§®‡•Ä‡§§‡§ø 2020",
            "COVID-19 ‡§î‡§∞ ‡§µ‡•à‡§ï‡•ç‡§∏‡•Ä‡§®‡•á‡§∂‡§®",
            "‡§Ö‡§Ç‡§§‡§∞‡§ø‡§ï‡•ç‡§∑ ‡§Æ‡§ø‡§∂‡§® (‡§ö‡§Ç‡§¶‡•ç‡§∞‡§Ø‡§æ‡§®, ‡§Æ‡§Ç‡§ó‡§≤‡§Ø‡§æ‡§®)"
        ]
    else:
        return [
            "India's G20 Presidency",
            "Digital India Initiative",
            "Atmanirbhar Bharat Campaign",
            "Climate Change and COP28",
            "India-China Border Issues",
            "Agricultural Reforms and MSP",
            "Swachh Bharat Mission",
            "New Education Policy 2020",
            "COVID-19 and Vaccination Drive",
            "Space Missions (Chandrayaan, Mangalyaan)"
        ]
