import streamlit as st
from utils.ai_services import AIServices
from utils.data_manager import DataManager
from utils.language_manager import LanguageManager
import time
from datetime import datetime

def show_mock_interview_page(language: str, lang_manager: LanguageManager):
    """Display the AI mock interview page"""
    
    ai_services = AIServices()
    data_manager = DataManager()
    
    st.markdown(f"## ЁЯОЩя╕П {lang_manager.get_text('ai_mock_interview', language)}")
    
    # Interview setup
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### ЁЯОп Interview Preparation" if language == 'en' else "### ЁЯОп рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рддреИрдпрд╛рд░реА")
        
        # Topic selection
        interview_topics = lang_manager.get_interview_topics(language)
        selected_topic = st.selectbox(
            lang_manager.get_text('interview_topic', language),
            options=list(interview_topics.keys()),
            key="interview_topic"
        )
        
        # Interview type
        interview_types = {
            'Personal Interview': 'рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░' if language == 'hi' else 'Personal Interview',
            'Technical Interview': 'рддрдХрдиреАрдХреА рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░' if language == 'hi' else 'Technical Interview',
            'Group Discussion': 'рд╕рдореВрд╣ рдЪрд░реНрдЪрд╛' if language == 'hi' else 'Group Discussion',
            'Stress Interview': 'рддрдирд╛рд╡ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░' if language == 'hi' else 'Stress Interview'
        }
        
        interview_type = st.selectbox(
            "Interview Type" if language == 'en' else "рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдкреНрд░рдХрд╛рд░",
            options=list(interview_types.keys()),
            format_func=lambda x: interview_types[x]
        )
        
        # Difficulty level
        difficulty = st.slider(
            "Interview Difficulty" if language == 'en' else "рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдХрдард┐рдирд╛рдИ",
            min_value=1,
            max_value=5,
            value=3
        )
    
    with col2:
        # Interview tips
        st.markdown("### ЁЯТб Interview Tips" if language == 'en' else "### ЁЯТб рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рд╕реБрдЭрд╛рд╡")
        
        tips = get_interview_tips(language)
        for tip in tips[:5]:
            st.markdown(f"тАв {tip}")
        
        # Recent interview scores
        if st.session_state.user_data.get('interview_scores'):
            recent_scores = st.session_state.user_data['interview_scores'][-3:]
            st.markdown("### ЁЯУК Recent Scores" if language == 'en' else "### ЁЯУК рд╣рд╛рд▓ рдХреЗ рд╕реНрдХреЛрд░")
            for score in recent_scores:
                st.metric("Score", f"{score['score']}/100")
    
    # Start interview button
    if st.button(f"ЁЯЪА {lang_manager.get_text('start_interview', language)}", use_container_width=True):
        start_interview_session(selected_topic, interview_type, difficulty, language, ai_services, lang_manager)

def start_interview_session(topic: str, interview_type: str, difficulty: int, language: str, 
                           ai_services: AIServices, lang_manager: LanguageManager):
    """Start an interview session"""
    
    # Initialize interview session
    if 'interview_session' not in st.session_state:
        st.session_state.interview_session = {
            'topic': topic,
            'type': interview_type,
            'difficulty': difficulty,
            'language': language,
            'questions': generate_interview_questions(topic, interview_type, difficulty, language),
            'current_question': 0,
            'responses': [],
            'start_time': time.time()
        }
    
    session = st.session_state.interview_session
    
    if session['current_question'] < len(session['questions']):
        display_interview_question(session, ai_services, lang_manager)
    else:
        display_interview_results(session, lang_manager)

def generate_interview_questions(topic: str, interview_type: str, difficulty: int, language: str) -> list:
    """Generate interview questions based on parameters"""
    
    # Predefined questions based on topic and type
    question_bank = {
        'en': {
            'Personal Background': [
                "Tell me about yourself and your background.",
                "What motivates you to join government service?",
                "Describe your strengths and weaknesses.",
                "How do you handle pressure and stressful situations?",
                "What are your long-term career goals?"
            ],
            'Career Goals': [
                "Why do you want to work in the government sector?",
                "How do you see yourself contributing to public service?",
                "What changes would you like to bring in your department?",
                "How do you balance personal ambitions with public service?",
                "Describe your ideal work environment."
            ],
            'Current Affairs': [
                "What is your opinion on the latest government policies?",
                "How do current economic trends affect governance?",
                "Discuss a recent international event and its impact on India.",
                "What are the major challenges facing India today?",
                "How should the government address unemployment?"
            ],
            'Leadership': [
                "Describe a situation where you demonstrated leadership.",
                "How do you motivate a team during challenging times?",
                "What is the difference between a manager and a leader?",
                "How do you handle conflicts within your team?",
                "Give an example of a difficult decision you had to make."
            ],
            'Ethics': [
                "How do you handle ethical dilemmas in the workplace?",
                "What would you do if asked to compromise your values?",
                "Describe a situation where you stood up for what's right.",
                "How important is transparency in government work?",
                "What does integrity mean to you?"
            ]
        },
        'hi': {
            'Personal Background': [
                "рдЕрдкрдиреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЕрдкрдиреА рдкреГрд╖реНрдарднреВрдорд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВред",
                "рдЖрдкрдХреЛ рд╕рд░рдХрд╛рд░реА рд╕реЗрд╡рд╛ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдиреЗ рдХреА рдкреНрд░реЗрд░рдгрд╛ рдХреНрдпрд╛ рджреЗрддреА рд╣реИ?",
                "рдЕрдкрдиреА рд╢рдХреНрддрд┐рдпреЛрдВ рдФрд░ рдХрдордЬреЛрд░рд┐рдпреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВред",
                "рдЖрдк рджрдмрд╛рд╡ рдФрд░ рддрдирд╛рд╡рдкреВрд░реНрдг рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреЛ рдХреИрд╕реЗ рд╕рдВрднрд╛рд▓рддреЗ рд╣реИрдВ?",
                "рдЖрдкрдХреЗ рджреАрд░реНрдШрдХрд╛рд▓рд┐рдХ рдХрд░рд┐рдпрд░ рд▓рдХреНрд╖реНрдп рдХреНрдпрд╛ рд╣реИрдВ?"
            ],
            'Career Goals': [
                "рдЖрдк рд╕рд░рдХрд╛рд░реА рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдХреНрдпреЛрдВ рдХрд╛рдо рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
                "рдЖрдк рд▓реЛрдХ рд╕реЗрд╡рд╛ рдореЗрдВ рдЕрдкрдирд╛ рдпреЛрдЧрджрд╛рди рдХреИрд╕реЗ рджреЗрдЦрддреЗ рд╣реИрдВ?",
                "рдЖрдк рдЕрдкрдиреЗ рд╡рд┐рднрд╛рдЧ рдореЗрдВ рдХреНрдпрд╛ рдмрджрд▓рд╛рд╡ рд▓рд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
                "рдЖрдк рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╣рддреНрд╡рд╛рдХрд╛рдВрдХреНрд╖рд╛рдУрдВ рдФрд░ рд▓реЛрдХ рд╕реЗрд╡рд╛ рдХреЗ рдмреАрдЪ рд╕рдВрддреБрд▓рди рдХреИрд╕реЗ рдмрдирд╛рддреЗ рд╣реИрдВ?",
                "рдЕрдкрдиреЗ рдЖрджрд░реНрд╢ рдХрд╛рд░реНрдп рд╡рд╛рддрд╛рд╡рд░рдг рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВред"
            ],
            'Current Affairs': [
                "рдирд╡реАрдирддрдо рд╕рд░рдХрд╛рд░реА рдиреАрддрд┐рдпреЛрдВ рдкрд░ рдЖрдкрдХреА рдХреНрдпрд╛ рд░рд╛рдп рд╣реИ?",
                "рд╡рд░реНрддрдорд╛рди рдЖрд░реНрдерд┐рдХ рд░реБрдЭрд╛рди рд╢рд╛рд╕рди рдХреЛ рдХреИрд╕реЗ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддреЗ рд╣реИрдВ?",
                "рд╣рд╛рд▓ рдХреА рдХрд┐рд╕реА рдЕрдВрддрд░реНрд░рд╛рд╖реНрдЯреНрд░реАрдп рдШрдЯрдирд╛ рдФрд░ рднрд╛рд░рдд рдкрд░ рдЗрд╕рдХреЗ рдкреНрд░рднрд╛рд╡ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░реЗрдВред",
                "рдЖрдЬ рднрд╛рд░рдд рдХреЗ рд╕рд╛рдордиреЗ рдореБрдЦреНрдп рдЪреБрдиреМрддрд┐рдпрд╛рдВ рдХреНрдпрд╛ рд╣реИрдВ?",
                "рд╕рд░рдХрд╛рд░ рдХреЛ рдмреЗрд░реЛрдЬрдЧрд╛рд░реА рдХреА рд╕рдорд╕реНрдпрд╛ рдХреИрд╕реЗ рд╣рд▓ рдХрд░рдиреА рдЪрд╛рд╣рд┐рдП?"
            ],
            'Leadership': [
                "рдПрдХ рдРрд╕реА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдЬрд╣рд╛рдВ рдЖрдкрдиреЗ рдиреЗрддреГрддреНрд╡ рдХрд╛ рдкреНрд░рджрд░реНрд╢рди рдХрд┐рдпрд╛ред",
                "рдЪреБрдиреМрддреАрдкреВрд░реНрдг рд╕рдордп рдореЗрдВ рдЖрдк рдЯреАрдо рдХреЛ рдХреИрд╕реЗ рдкреНрд░реЗрд░рд┐рдд рдХрд░рддреЗ рд╣реИрдВ?",
                "рдПрдХ рдкреНрд░рдмрдВрдзрдХ рдФрд░ рдПрдХ рдиреЗрддрд╛ рдХреЗ рдмреАрдЪ рдХреНрдпрд╛ рдЕрдВрддрд░ рд╣реИ?",
                "рдЖрдк рдЕрдкрдиреА рдЯреАрдо рдХреЗ рднреАрддрд░ рд╕рдВрдШрд░реНрд╖реЛрдВ рдХреЛ рдХреИрд╕реЗ рд╕рдВрднрд╛рд▓рддреЗ рд╣реИрдВ?",
                "рдХрд┐рд╕реА рдХрдард┐рди рдирд┐рд░реНрдгрдп рдХрд╛ рдЙрджрд╛рд╣рд░рдг рджреЗрдВ рдЬреЛ рдЖрдкрдХреЛ рд▓реЗрдирд╛ рдкрдбрд╝рд╛ред"
            ],
            'Ethics': [
                "рдЖрдк рдХрд╛рд░реНрдпрд╕реНрдерд▓ рдореЗрдВ рдиреИрддрд┐рдХ рджреБрд╡рд┐рдзрд╛рдУрдВ рдХреЛ рдХреИрд╕реЗ рд╕рдВрднрд╛рд▓рддреЗ рд╣реИрдВ?",
                "рдпрджрд┐ рдЖрдкрд╕реЗ рдЕрдкрдиреЗ рдореВрд▓реНрдпреЛрдВ рд╕реЗ рд╕рдордЭреМрддрд╛ рдХрд░рдиреЗ рдХреЛ рдХрд╣рд╛ рдЬрд╛рдП рддреЛ рдЖрдк рдХреНрдпрд╛ рдХрд░реЗрдВрдЧреЗ?",
                "рдПрдХ рдРрд╕реА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдЬрд╣рд╛рдВ рдЖрдкрдиреЗ рд╕рд╣реА рдХреЗ рд▓рд┐рдП рдЦрдбрд╝реЗ рд╣реЛрдХрд░ рд╕рдорд░реНрдерди рдХрд┐рдпрд╛ред",
                "рд╕рд░рдХрд╛рд░реА рдХрд╛рдо рдореЗрдВ рдкрд╛рд░рджрд░реНрд╢рд┐рддрд╛ рдХрд┐рддрдиреА рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ?",
                "рдЖрдкрдХреЗ рд▓рд┐рдП рдИрдорд╛рдирджрд╛рд░реА рдХрд╛ рдХреНрдпрд╛ рдорддрд▓рдм рд╣реИ?"
            ]
        }
    }
    
    # Get questions for the topic
    lang_key = 'hi' if language == 'hi' else 'en'
    topic_questions = question_bank.get(lang_key, {}).get(topic, question_bank[lang_key]['Personal Background'])
    
    # Select questions based on difficulty (more questions for higher difficulty)
    num_questions = min(3 + difficulty, len(topic_questions))
    return topic_questions[:num_questions]

def display_interview_question(session: dict, ai_services: AIServices, lang_manager: LanguageManager):
    """Display current interview question and handle response"""
    
    current_q_idx = session['current_question']
    question = session['questions'][current_q_idx]
    language = session['language']
    
    # Progress indicator
    progress = (current_q_idx + 1) / len(session['questions'])
    st.progress(progress)
    st.markdown(f"**Question {current_q_idx + 1}/{len(session['questions'])}**")
    
    # Question display
    st.markdown(f"### ЁЯОд {question}")
    
    # Response input
    st.markdown(f"#### {lang_manager.get_text('record_answer', language)}")
    
    # Text response (primary method)
    user_response = st.text_area(
        "Your Response" if language == 'en' else "рдЖрдкрдХрд╛ рдЙрддреНрддрд░",
        height=150,
        key=f"response_{current_q_idx}",
        placeholder="Type your detailed response here..." if language == 'en' 
                   else "рдпрд╣рд╛рдВ рдЕрдкрдирд╛ рд╡рд┐рд╕реНрддреГрдд рдЙрддреНрддрд░ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
    )
    
    # Optional: Voice recording simulation
    col1, col2 = st.columns([3, 1])
    
    with col1:
        if st.button(f"ЁЯОп {lang_manager.get_text('submit_response', language)}", 
                    disabled=not user_response.strip(), use_container_width=True):
            # Evaluate response
            with st.spinner("Evaluating your response..." if language == 'en' else "рдЖрдкрдХреЗ рдЙрддреНрддрд░ рдХрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░ рд░рд╣реЗ рд╣реИрдВ..."):
                feedback = ai_services.conduct_mock_interview(question, user_response, language)
            
            # Store response and feedback
            session['responses'].append({
                'question': question,
                'response': user_response,
                'feedback': feedback,
                'timestamp': datetime.now().isoformat()
            })
            
            # Show feedback
            display_question_feedback(feedback, language, lang_manager)
            
            # Move to next question
            session['current_question'] += 1
            
            # Brief pause before next question
            time.sleep(2)
            st.rerun()
    
    with col2:
        if st.button("тПня╕П Skip", help="Skip this question"):
            session['responses'].append({
                'question': question,
                'response': "Skipped",
                'feedback': None,
                'timestamp': datetime.now().isoformat()
            })
            session['current_question'] += 1
            st.rerun()
    
    # Interview guidelines
    with st.expander("ЁЯТб Interview Guidelines" if language == 'en' else "ЁЯТб рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢"):
        guidelines = get_interview_guidelines(language)
        for guideline in guidelines:
            st.markdown(f"тАв {guideline}")

def display_question_feedback(feedback: dict, language: str, lang_manager: LanguageManager):
    """Display AI feedback for the current response"""
    
    if not feedback:
        return
    
    st.markdown("---")
    st.markdown(f"### ЁЯУЭ {lang_manager.get_text('interview_feedback', language)}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Score
        score = feedback.get('score', 75)
        st.metric(lang_manager.get_text('score', language), f"{score}/100")
        
        # Score interpretation
        if score >= 90:
            st.success("Excellent response! ЁЯМЯ")
        elif score >= 80:
            st.success("Very good response! ЁЯСП")
        elif score >= 70:
            st.info("Good response! ЁЯСН")
        elif score >= 60:
            st.warning("Average response. Room for improvement.")
        else:
            st.error("Needs significant improvement.")
    
    with col2:
        # Strengths
        if feedback.get('strengths'):
            st.markdown(f"**{lang_manager.get_text('strengths', language)}:**")
            for strength in feedback['strengths']:
                st.markdown(f"тЬЕ {strength}")
    
    # Areas for improvement
    if feedback.get('improvements'):
        st.markdown(f"**{lang_manager.get_text('improvements', language)}:**")
        for improvement in feedback['improvements']:
            st.markdown(f"ЁЯФД {improvement}")
    
    # Model answer
    if feedback.get('model_answer'):
        with st.expander(f"ЁЯУЦ {lang_manager.get_text('model_answer', language)}"):
            st.markdown(feedback['model_answer'])
    
    # Overall feedback
    if feedback.get('overall_feedback'):
        st.info(f"**{lang_manager.get_text('overall_feedback', language)}:** {feedback['overall_feedback']}")

def display_interview_results(session: dict, lang_manager: LanguageManager):
    """Display final interview results and comprehensive feedback"""
    
    language = session['language']
    
    st.markdown(f"## ЁЯОЙ Interview Completed!" if language == 'en' else "## ЁЯОЙ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдкреВрд░реНрдг!")
    
    # Calculate overall performance
    scores = [resp['feedback']['score'] for resp in session['responses'] if resp['feedback']]
    overall_score = sum(scores) / len(scores) if scores else 0
    
    # Performance summary
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Overall Score" if language == 'en' else "рд╕рдордЧреНрд░ рд╕реНрдХреЛрд░", f"{overall_score:.1f}/100")
    
    with col2:
        interview_time = (time.time() - session['start_time']) / 60
        st.metric("Time Taken" if language == 'en' else "рд╕рдордп рд▓рд┐рдпрд╛", f"{interview_time:.1f} min")
    
    with col3:
        st.metric("Questions Answered" if language == 'en' else "рдЙрддреНрддрд░ рджрд┐рдП рдЧрдП рдкреНрд░рд╢реНрди", 
                 len([r for r in session['responses'] if r['response'] != 'Skipped']))
    
    # Performance evaluation
    st.markdown("---")
    st.markdown("### ЁЯУК Performance Evaluation" if language == 'en' else "### ЁЯУК рдкреНрд░рджрд░реНрд╢рди рдореВрд▓реНрдпрд╛рдВрдХрди")
    
    if overall_score >= 85:
        st.success("ЁЯПЖ Outstanding performance! You're well-prepared for interviews." if language == 'en'
                  else "ЁЯПЖ рдЙрддреНрдХреГрд╖реНрдЯ рдкреНрд░рджрд░реНрд╢рди! рдЖрдк рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫреА рддрд░рд╣ рддреИрдпрд╛рд░ рд╣реИрдВред")
    elif overall_score >= 75:
        st.success("ЁЯМЯ Very good performance! Minor improvements needed." if language == 'en'
                  else "ЁЯМЯ рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рдкреНрд░рджрд░реНрд╢рди! рдорд╛рдореВрд▓реА рд╕реБрдзрд╛рд░ рдХреА рдЬрд░реВрд░рдд рд╣реИред")
    elif overall_score >= 65:
        st.info("ЁЯСН Good performance! Some areas need attention." if language == 'en'
               else "ЁЯСН рдЕрдЪреНрдЫрд╛ рдкреНрд░рджрд░реНрд╢рди! рдХреБрдЫ рдХреНрд╖реЗрддреНрд░реЛрдВ рдкрд░ рдзреНрдпрд╛рди рджреЗрдиреЗ рдХреА рдЬрд░реВрд░рдд рд╣реИред")
    else:
        st.warning("ЁЯТк Needs improvement. Keep practicing!" if language == 'en'
                  else "ЁЯТк рд╕реБрдзрд╛рд░ рдХреА рдЬрд░реВрд░рдд рд╣реИред рдЕрднреНрдпрд╛рд╕ рдЬрд╛рд░реА рд░рдЦреЗрдВ!")
    
    # Detailed question-wise feedback
    with st.expander("ЁЯУЛ Detailed Question-wise Feedback" if language == 'en' else "ЁЯУЛ рд╡рд┐рд╕реНрддреГрдд рдкреНрд░рд╢реНрди-рд╡рд╛рд░ рдлреАрдбрдмреИрдХ"):
        for i, response in enumerate(session['responses']):
            st.markdown(f"#### Question {i+1}: {response['question']}")
            
            if response['response'] == 'Skipped':
                st.warning("This question was skipped." if language == 'en' else "рдпрд╣ рдкреНрд░рд╢реНрди рдЫреЛрдбрд╝ рджрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ред")
            else:
                st.markdown(f"**Your Response:** {response['response']}")
                
                if response['feedback']:
                    feedback = response['feedback']
                    st.markdown(f"**Score:** {feedback.get('score', 'N/A')}/100")
                    
                    if feedback.get('overall_feedback'):
                        st.info(feedback['overall_feedback'])
            
            st.divider()
    
    # Save interview results
    data_manager = DataManager()
    data_manager.save_interview_result(overall_score, session['topic'], language)
    
    # Action buttons
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("ЁЯФД Another Interview" if language == 'en' else "ЁЯФД рджреВрд╕рд░рд╛ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░", use_container_width=True):
            if 'interview_session' in st.session_state:
                del st.session_state.interview_session
            st.rerun()
    
    with col2:
        if st.button("ЁЯУК View Analytics" if language == 'en' else "ЁЯУК рд╡рд┐рд╢реНрд▓реЗрд╖рдг рджреЗрдЦреЗрдВ", use_container_width=True):
            st.session_state.page = 'Analytics'
            st.rerun()
    
    with col3:
        if st.button("ЁЯПа Home" if language == 'en' else "ЁЯПа рд╣реЛрдо", use_container_width=True):
            if 'interview_session' in st.session_state:
                del st.session_state.interview_session
            st.session_state.page = 'Home'
            st.rerun()

def get_interview_tips(language: str) -> list:
    """Get interview tips based on language"""
    
    if language == 'hi':
        return [
            "рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реЗ рдмреЛрд▓реЗрдВ рдФрд░ рдЖрдВрдЦреЛрдВ рдореЗрдВ рдЖрдВрдЦреЗрдВ рдбрд╛рд▓рдХрд░ рдмрд╛рдд рдХрд░реЗрдВ",
            "рдкреНрд░рд╢реНрди рдХреЛ рдзреНрдпрд╛рди рд╕реЗ рд╕реБрдиреЗрдВ рдФрд░ рд╕рдордЭрдХрд░ рдЙрддреНрддрд░ рджреЗрдВ",
            "рдЕрдкрдиреЗ рдЙрддреНрддрд░ рдореЗрдВ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрджрд╛рд╣рд░рдг рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ",
            "рд╕рдХрд╛рд░рд╛рддреНрдордХ рднрд╛рд╖рд╛ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рдирдХрд╛рд░рд╛рддреНрдордХрддрд╛ рд╕реЗ рдмрдЪреЗрдВ",
            "рд╕рдорд╕рд╛рдордпрд┐рдХ рдШрдЯрдирд╛рдУрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд░рдЦреЗрдВ",
            "рд╢рд╛рдВрдд рд░рд╣реЗрдВ рдФрд░ рддрдирд╛рд╡ рди рд▓реЗрдВ",
            "рдИрдорд╛рдирджрд╛рд░реА рд╕реЗ рдЙрддреНрддрд░ рджреЗрдВ, рдХреБрдЫ рднреА рдЧрд▓рдд рди рдмреЛрд▓реЗрдВ",
            "рд╕рдордп рдХрд╛ рдзреНрдпрд╛рди рд░рдЦреЗрдВ рдФрд░ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдЙрддреНрддрд░ рджреЗрдВ"
        ]
    else:
        return [
            "Speak confidently and maintain eye contact",
            "Listen carefully to questions and think before answering",
            "Include practical examples in your responses",
            "Use positive language and avoid negativity",
            "Stay updated with current affairs",
            "Remain calm and composed under pressure",
            "Be honest and authentic in your answers",
            "Manage time well and give concise responses"
        ]

def get_interview_guidelines(language: str) -> list:
    """Get interview guidelines based on language"""
    
    if language == 'hi':
        return [
            "рд╕реНрдкрд╖реНрдЯ рдФрд░ рдзреАрдореА рдЧрддрд┐ рд╕реЗ рдмреЛрд▓реЗрдВ",
            "рдкреНрд░рд╢реНрди рдХреЛ рдкреВрд░реА рддрд░рд╣ рд╕рдордЭрдиреЗ рдХреЗ рдмрд╛рдж рдЙрддреНрддрд░ рджреЗрдВ",
            "рдЕрдкрдиреЗ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЕрдиреБрднрд╡ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
            "рд╕рд░рдХрд╛рд░реА рдиреАрддрд┐рдпреЛрдВ рдФрд░ рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджрд┐рдЦрд╛рдПрдВ",
            "рдиреЗрддреГрддреНрд╡ рдФрд░ рдЯреАрдо рд╡рд░реНрдХ рдХреЗ рдЙрджрд╛рд╣рд░рдг рджреЗрдВ",
            "рд╕рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди рдХреА рдХреНрд╖рдорддрд╛ рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░реЗрдВ"
        ]
    else:
        return [
            "Speak clearly and at a moderate pace",
            "Fully understand the question before responding",
            "Share your personal experiences and examples",
            "Demonstrate knowledge of government policies",
            "Provide examples of leadership and teamwork",
            "Show problem-solving abilities and analytical thinking"
        ]
