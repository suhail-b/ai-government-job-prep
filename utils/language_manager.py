from typing import Dict, Any

class LanguageManager:
    """Manages multilingual content for the application"""
    
    def __init__(self):
        self.translations = {
            'en': {
                # App main
                'app_title': 'AI Government Job Prep',
                'welcome_message': 'Welcome to AI-Powered Government Job Preparation',
                'app_description': 'üéØ Prepare for Indian government exams with AI-powered quizzes, personalized study plans, and comprehensive analytics. Master UPSC, SSC, Banking, Railways, and other competitive exams with our intelligent learning platform.',
                
                # Navigation
                'home': 'Home',
                'quiz': 'AI Quiz',
                'study_plan': 'Study Plan',
                'analytics': 'Analytics',
                'mock_interview': 'Mock Interview',
                'current_affairs': 'Current Affairs',
                
                # Profile
                'profile_setup': 'Profile Setup',
                'your_name': 'Your Name',
                'target_exam': 'Target Exam',
                'target_date': 'Target Date',
                'daily_study_hours': 'Daily Study Hours',
                'save_profile': 'Save Profile',
                'profile_saved': 'Profile saved successfully!',
                
                # Quick stats
                'quick_stats': 'Quick Stats',
                'total_points': 'Total Points',
                'study_streak': 'Study Streak',
                'days': 'days',
                'quizzes_completed': 'Quizzes Completed',
                'achievements': 'Achievements',
                
                # Quick actions
                'quick_actions': 'Quick Actions',
                'take_quiz': 'Take Quiz',
                'view_progress': 'View Progress',
                'mock_interview': 'Mock Interview',
                
                # Quiz
                'quiz_generator': 'AI Quiz Generator',
                'select_topic': 'Select Topic',
                'select_difficulty': 'Select Difficulty (1-5)',
                'number_of_questions': 'Number of Questions',
                'generate_quiz': 'Generate Quiz',
                'submit_answer': 'Submit Answer',
                'next_question': 'Next Question',
                'quiz_completed': 'Quiz Completed!',
                'your_score': 'Your Score',
                'correct_answer': 'Correct Answer',
                'explanation': 'Explanation',
                'points_earned': 'Points Earned',
                
                # Study Plan
                'personalized_study_plan': 'Personalized Study Plan',
                'generate_study_plan': 'Generate Study Plan',
                'daily_schedule': 'Daily Schedule',
                'weekly_goals': 'Weekly Goals',
                'recommended_topics': 'Recommended Topics',
                'study_tips': 'Study Tips',
                'time_slot': 'Time Slot',
                'subject': 'Subject',
                'duration': 'Duration',
                'activity': 'Activity',
                'priority': 'Priority',
                
                # Analytics
                'performance_analytics': 'Performance Analytics',
                'overall_performance': 'Overall Performance',
                'topic_wise_performance': 'Topic-wise Performance',
                'recent_activity': 'Recent Activity',
                'performance_trend': 'Performance Trend',
                'weak_topics': 'Topics to Focus On',
                'strong_topics': 'Strong Topics',
                'average_score': 'Average Score',
                'best_score': 'Best Score',
                'total_attempts': 'Total Attempts',
                
                # Mock Interview
                'ai_mock_interview': 'AI Mock Interview',
                'interview_topic': 'Interview Topic',
                'start_interview': 'Start Interview',
                'record_answer': 'Record Your Answer',
                'submit_response': 'Submit Response',
                'interview_feedback': 'Interview Feedback',
                'score': 'Score',
                'strengths': 'Strengths',
                'improvements': 'Areas for Improvement',
                'model_answer': 'Model Answer',
                'overall_feedback': 'Overall Feedback',
                
                # Current Affairs
                'current_affairs_tracker': 'Current Affairs Tracker',
                'latest_updates': 'Latest Updates',
                'generate_questions': 'Generate Questions',
                'news_topic': 'News Topic',
                
                # Common
                'loading': 'Loading...',
                'error': 'Error',
                'success': 'Success',
                'retry': 'Retry',
                'back': 'Back',
                'continue': 'Continue',
                'reset': 'Reset',
                'save': 'Save',
                'cancel': 'Cancel',
                'close': 'Close'
            },
            'hi': {
                # App main
                'app_title': '‡§è‡§Ü‡§à ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä',
                'welcome_message': '‡§è‡§Ü‡§à-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
                'app_description': 'üéØ ‡§è‡§Ü‡§à-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º, ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§Æ‡§Ç‡§ö ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ø‡•Ç‡§™‡•Ä‡§è‡§∏‡§∏‡•Ä, ‡§è‡§∏‡§è‡§∏‡§∏‡•Ä, ‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó, ‡§∞‡•á‡§≤‡§µ‡•á ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§§‡§ø‡§Ø‡•ã‡§ó‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§',
                
                # Navigation
                'home': '‡§π‡•ã‡§Æ',
                'quiz': '‡§è‡§Ü‡§à ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º',
                'study_plan': '‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ',
                'analytics': '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
                'mock_interview': '‡§Æ‡•â‡§ï ‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç',
                'current_affairs': '‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä',
                
                # Profile
                'profile_setup': '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡•á‡§ü‡§Ö‡§™',
                'your_name': '‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ',
                'target_exam': '‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ',
                'target_date': '‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï',
                'daily_study_hours': '‡§¶‡•à‡§®‡§ø‡§ï ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ò‡§Ç‡§ü‡•á',
                'save_profile': '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç',
                'profile_saved': '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§Ø‡§æ!',
                
                # Quick stats
                'quick_stats': '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§Ü‡§Å‡§ï‡§°‡§º‡•á',
                'total_points': '‡§ï‡•Å‡§≤ ‡§Ö‡§Ç‡§ï',
                'study_streak': '‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ',
                'days': '‡§¶‡§ø‡§®',
                'quizzes_completed': '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º',
                'achievements': '‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Å',
                
                # Quick actions
                'quick_actions': '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø',
                'take_quiz': '‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§≤‡•á‡§Ç',
                'view_progress': '‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç',
                'mock_interview': '‡§Æ‡•â‡§ï ‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç',
                
                # Quiz
                'quiz_generator': '‡§è‡§Ü‡§à ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ú‡•á‡§®‡§∞‡•á‡§ü‡§∞',
                'select_topic': '‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç',
                'select_difficulty': '‡§ï‡§†‡§ø‡§®‡§æ‡§à ‡§ö‡•Å‡§®‡•á‡§Ç (1-5)',
                'number_of_questions': '‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ',
                'generate_quiz': '‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
                'submit_answer': '‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç',
                'next_question': '‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®',
                'quiz_completed': '‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡•Ç‡§∞‡•ç‡§£!',
                'your_score': '‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞',
                'correct_answer': '‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞',
                'explanation': '‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡•Ä‡§ï‡§∞‡§£',
                'points_earned': '‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ ‡§Ö‡§Ç‡§ï',
                
                # Study Plan
                'personalized_study_plan': '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ',
                'generate_study_plan': '‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç',
                'daily_schedule': '‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ',
                'weekly_goals': '‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø',
                'recommended_topics': '‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§µ‡§ø‡§∑‡§Ø',
                'study_tips': '‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§∏‡•Å‡§ù‡§æ‡§µ',
                'time_slot': '‡§∏‡§Æ‡§Ø ‡§∏‡•ç‡§≤‡•â‡§ü',
                'subject': '‡§µ‡§ø‡§∑‡§Ø',
                'duration': '‡§Ö‡§µ‡§ß‡§ø',
                'activity': '‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø',
                'priority': '‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ',
                
                # Analytics
                'performance_analytics': '‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
                'overall_performance': '‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®',
                'topic_wise_performance': '‡§µ‡§ø‡§∑‡§Ø‡§µ‡§æ‡§∞ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®',
                'recent_activity': '‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø',
                'performance_trend': '‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø',
                'weak_topics': '‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§µ‡§ø‡§∑‡§Ø',
                'strong_topics': '‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§µ‡§ø‡§∑‡§Ø',
                'average_score': '‡§î‡§∏‡§§ ‡§∏‡•ç‡§ï‡•ã‡§∞',
                'best_score': '‡§∏‡§∞‡•ç‡§µ‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§† ‡§∏‡•ç‡§ï‡•ã‡§∞',
                'total_attempts': '‡§ï‡•Å‡§≤ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏',
                
                # Mock Interview
                'ai_mock_interview': '‡§è‡§Ü‡§à ‡§Æ‡•â‡§ï ‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç',
                'interview_topic': '‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç ‡§µ‡§ø‡§∑‡§Ø',
                'start_interview': '‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
                'record_answer': '‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç',
                'submit_response': '‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç',
                'interview_feedback': '‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç ‡§´‡•Ä‡§°‡§¨‡•à‡§ï',
                'score': '‡§∏‡•ç‡§ï‡•ã‡§∞',
                'strengths': '‡§∂‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Å',
                'improvements': '‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞',
                'model_answer': '‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§â‡§§‡•ç‡§§‡§∞',
                'overall_feedback': '‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§´‡•Ä‡§°‡§¨‡•à‡§ï',
                
                # Current Affairs
                'current_affairs_tracker': '‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞',
                'latest_updates': '‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü',
                'generate_questions': '‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
                'news_topic': '‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§µ‡§ø‡§∑‡§Ø',
                
                # Common
                'loading': '‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...',
                'error': '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',
                'success': '‡§∏‡§´‡§≤‡§§‡§æ',
                'retry': '‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏',
                'back': '‡§µ‡§æ‡§™‡§∏',
                'continue': '‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç',
                'reset': '‡§∞‡•Ä‡§∏‡•á‡§ü',
                'save': '‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç',
                'cancel': '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
                'close': '‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç'
            }
        }
    
    def get_text(self, key: str, language: str = 'en') -> str:
        """Get translated text for a given key and language"""
        return self.translations.get(language, {}).get(key, key)
    
    def get_menu_options(self, language: str = 'en') -> Dict[str, str]:
        """Get menu options in the specified language"""
        return {
            self.get_text('home', language): 'home',
            self.get_text('quiz', language): 'quiz',
            self.get_text('study_plan', language): 'study_plan',
            self.get_text('analytics', language): 'analytics',
            self.get_text('mock_interview', language): 'mock_interview',
            self.get_text('current_affairs', language): 'current_affairs'
        }
    
    def get_exam_types(self, language: str = 'en') -> Dict[str, str]:
        """Get exam types in the specified language"""
        if language == 'hi':
            return {
                'UPSC Civil Services': '‡§Ø‡•Ç‡§™‡•Ä‡§è‡§∏‡§∏‡•Ä ‡§∏‡§ø‡§µ‡§ø‡§≤ ‡§∏‡•á‡§µ‡§æ',
                'SSC CGL': '‡§è‡§∏‡§è‡§∏‡§∏‡•Ä ‡§∏‡•Ä‡§ú‡•Ä‡§è‡§≤',
                'SSC CHSL': '‡§è‡§∏‡§è‡§∏‡§∏‡•Ä ‡§∏‡•Ä‡§è‡§ö‡§è‡§∏‡§è‡§≤',
                'Banking (IBPS/SBI)': '‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó (‡§Ü‡§à‡§¨‡•Ä‡§™‡•Ä‡§è‡§∏/‡§è‡§∏‡§¨‡•Ä‡§Ü‡§à)',
                'Railway (RRB)': '‡§∞‡•á‡§≤‡§µ‡•á (‡§Ü‡§∞‡§Ü‡§∞‡§¨‡•Ä)',
                'State PSC': '‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§™‡•Ä‡§è‡§∏‡§∏‡•Ä',
                'Teaching (CTET/TET)': '‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ (‡§∏‡•Ä‡§ü‡•á‡§ü/‡§ü‡•á‡§ü)',
                'Defense (CDS/NDA)': '‡§∞‡§ï‡•ç‡§∑‡§æ (‡§∏‡•Ä‡§°‡•Ä‡§è‡§∏/‡§è‡§®‡§°‡•Ä‡§è)',
                'Police/Constable': '‡§™‡•Å‡§≤‡§ø‡§∏/‡§ï‡§æ‡§Ç‡§∏‡•ç‡§ü‡•á‡§¨‡§≤',
                'Other': '‡§Ö‡§®‡•ç‡§Ø'
            }
        else:
            return {
                'UPSC Civil Services': 'UPSC Civil Services',
                'SSC CGL': 'SSC Combined Graduate Level',
                'SSC CHSL': 'SSC Combined Higher Secondary Level',
                'Banking (IBPS/SBI)': 'Banking (IBPS/SBI)',
                'Railway (RRB)': 'Railway Recruitment Board',
                'State PSC': 'State Public Service Commission',
                'Teaching (CTET/TET)': 'Teaching (CTET/TET)',
                'Defense (CDS/NDA)': 'Defense (CDS/NDA)',
                'Police/Constable': 'Police/Constable',
                'Other': 'Other'
            }
    
    def get_quiz_topics(self, language: str = 'en') -> Dict[str, str]:
        """Get quiz topics in the specified language"""
        if language == 'hi':
            return {
                'General Knowledge': '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§®',
                'Indian History': '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
                'Geography': '‡§≠‡•Ç‡§ó‡•ã‡§≤',
                'Indian Polity': '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∞‡§æ‡§ú‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ',
                'Economics': '‡§Ö‡§∞‡•ç‡§•‡§∂‡§æ‡§∏‡•ç‡§§‡•ç‡§∞',
                'Current Affairs': '‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä',
                'Science & Technology': '‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä',
                'Environment': '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£',
                'Mathematics': '‡§ó‡§£‡§ø‡§§',
                'English': '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä',
                'Reasoning': '‡§§‡§∞‡•ç‡§ï‡§∂‡§ï‡•ç‡§§‡§ø',
                'Computer Knowledge': '‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§ú‡•ç‡§û‡§æ‡§®'
            }
        else:
            return {
                'General Knowledge': 'General Knowledge',
                'Indian History': 'Indian History',
                'Geography': 'Geography',
                'Indian Polity': 'Indian Polity & Constitution',
                'Economics': 'Economics',
                'Current Affairs': 'Current Affairs',
                'Science & Technology': 'Science & Technology',
                'Environment': 'Environment & Ecology',
                'Mathematics': 'Mathematics',
                'English': 'English Language',
                'Reasoning': 'Logical Reasoning',
                'Computer Knowledge': 'Computer Knowledge'
            }
    
    def get_interview_topics(self, language: str = 'en') -> Dict[str, str]:
        """Get interview topics in the specified language"""
        if language == 'hi':
            return {
                'Personal Background': '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø',
                'Career Goals': '‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø',
                'Current Affairs': '‡§∏‡§Æ‡§∏‡§æ‡§Æ‡§Ø‡§ø‡§ï‡•Ä',
                'Government Policies': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç',
                'Social Issues': '‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§Æ‡•Å‡§¶‡•ç‡§¶‡•á',
                'Leadership': '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ',
                'Problem Solving': '‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®',
                'Ethics': '‡§®‡•à‡§§‡§ø‡§ï‡§§‡§æ',
                'Public Administration': '‡§≤‡•ã‡§ï ‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§®'
            }
        else:
            return {
                'Personal Background': 'Personal Background',
                'Career Goals': 'Career Goals & Motivation',
                'Current Affairs': 'Current Affairs',
                'Government Policies': 'Government Policies',
                'Social Issues': 'Social Issues',
                'Leadership': 'Leadership & Management',
                'Problem Solving': 'Problem Solving',
                'Ethics': 'Ethics & Integrity',
                'Public Administration': 'Public Administration'
            }
    
    def get_current_affairs_categories(self, language: str = 'en') -> Dict[str, str]:
        """Get current affairs categories in the specified language"""
        if language == 'hi':
            return {
                'National Politics': '‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∞‡§æ‡§ú‡§®‡•Ä‡§§‡§ø',
                'International Relations': '‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß',
                'Economy & Business': '‡§Ö‡§∞‡•ç‡§•‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞',
                'Science & Technology': '‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä',
                'Sports': '‡§ñ‡•á‡§≤',
                'Awards & Recognition': '‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§®',
                'Government Schemes': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
                'Environment': '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£',
                'Defense': '‡§∞‡§ï‡•ç‡§∑‡§æ',
                'Education': '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ'
            }
        else:
            return {
                'National Politics': 'National Politics',
                'International Relations': 'International Relations',
                'Economy & Business': 'Economy & Business',
                'Science & Technology': 'Science & Technology',
                'Sports': 'Sports',
                'Awards & Recognition': 'Awards & Recognition',
                'Government Schemes': 'Government Schemes',
                'Environment': 'Environment',
                'Defense': 'Defense',
                'Education': 'Education'
            }
